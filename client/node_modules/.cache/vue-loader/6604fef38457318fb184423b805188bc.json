{"remainingRequest":"/home/student/Bureau/HabitsGame/client/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/student/Bureau/HabitsGame/client/src/views/SnakeGame.vue?vue&type=template&id=5e58f788&scoped=true","dependencies":[{"path":"/home/student/Bureau/HabitsGame/client/src/views/SnakeGame.vue","mtime":1727555706472},{"path":"/home/student/Bureau/HabitsGame/client/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/student/Bureau/HabitsGame/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/student/Bureau/HabitsGame/client/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBpZD0iZ2FtZUNvbnRhaW5lciI+CiAgICA8aDEgY2xhc3M9InRpdGxlIj5KZXUgZGUgU2VycGVudDwvaDE+CiAgICA8YnV0dG9uIGNsYXNzPSJnYW1lQnV0dG9uIGFuaW1hdGVkIiB2LWlmPSIhaXNHYW1lU3RhcnRlZCIgQGNsaWNrPSJzdGFydEdhbWUiPkTDqW1hcnJlciBsZSBqZXU8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImdhbWVCdXR0b24gYW5pbWF0ZWQiIHYtaWY9IiFpc0dhbWVTdGFydGVkIiBAY2xpY2s9InF1aXRHYW1lIj5SZXRvdXJuZXIgYXUgTWVudTwvYnV0dG9uPgogICAgPGNhbnZhcyByZWY9ImdhbWVDYW52YXMiIHYtaWY9ImlzR2FtZVN0YXJ0ZWQiIDp3aWR0aD0iY2FudmFzU2l6ZSIgOmhlaWdodD0iY2FudmFzU2l6ZSI+PC9jYW52YXM+CiAgICAKICAgIDxkaXYgY2xhc3M9InNjb3JlIj5TY29yZToge3sgc2NvcmUgfX0gfCBNZWlsbGV1ciBTY29yZToge3sgaGlnaFNjb3JlIH19PC9kaXY+IDwhLS0gQWZmaWNoYWdlIGR1IHNjb3JlIC0tPgoKICAgIDxkaXYgdi1pZj0iaXNHYW1lUGF1c2VkIiBjbGFzcz0icGF1c2VNZW51Ij4KICAgICAgPGgyPkpldSBlbiBQYXVzZTwvaDI+CiAgICAgIDxidXR0b24gY2xhc3M9ImdhbWVCdXR0b24gYW5pbWF0ZWQiIEBjbGljaz0icmVzdW1lR2FtZSI+UmVwcmVuZHJlPC9idXR0b24+CiAgICAgIDxidXR0b24gY2xhc3M9ImdhbWVCdXR0b24gYW5pbWF0ZWQiIEBjbGljaz0icXVpdEdhbWUiPlF1aXR0ZXI8L2J1dHRvbj4KICAgIDwvZGl2PgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/student/Bureau/HabitsGame/client/src/views/SnakeGame.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrxG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/student/Bureau/HabitsGame/client/src/views/SnakeGame.vue","sourceRoot":"","sourcesContent":["<template>\n  <div id=\"gameContainer\">\n    <h1 class=\"title\">Jeu de Serpent</h1>\n    <button class=\"gameButton animated\" v-if=\"!isGameStarted\" @click=\"startGame\">D√©marrer le jeu</button>\n    <button class=\"gameButton animated\" v-if=\"!isGameStarted\" @click=\"quitGame\">Retourner au Menu</button>\n    <canvas ref=\"gameCanvas\" v-if=\"isGameStarted\" :width=\"canvasSize\" :height=\"canvasSize\"></canvas>\n    \n    <div class=\"score\">Score: {{ score }} | Meilleur Score: {{ highScore }}</div> <!-- Affichage du score -->\n\n    <div v-if=\"isGamePaused\" class=\"pauseMenu\">\n      <h2>Jeu en Pause</h2>\n      <button class=\"gameButton animated\" @click=\"resumeGame\">Reprendre</button>\n      <button class=\"gameButton animated\" @click=\"quitGame\">Quitter</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      canvas: null,\n      context: null,\n      snake: [],\n      direction: { x: 0, y: 0 },\n      food: { x: 0, y: 0, type: '' },\n      score: 0,\n      highScore: 0,\n      isGameStarted: false,\n      isGamePaused: false,\n      soundEnabled: true,\n      snakeColor: 'green', // Couleur par d√©faut\n      gameInterval: null,\n      snakeSize: 30,\n      canvasSize: 600,\n      barrierHeight: 20,\n      barrierWidth: 30,\n      scores: [], // Liste des scores\n    };\n  },\n  methods: {\n    loadSnakeColor() {\n      const savedColor = localStorage.getItem('snakeColor');\n      if (savedColor) {\n        this.snakeColor = savedColor;\n      }\n    },\n    startGame() {\n      this.isGameStarted = true;\n      this.$nextTick(() => {\n        this.canvas = this.$refs.gameCanvas;\n        this.context = this.canvas.getContext('2d');\n        this.resetGame();\n        this.spawnFood();\n        this.gameInterval = setInterval(this.gameLoop, 100);\n        document.addEventListener('keydown', this.handleKeyDown);\n      });\n    },\n    resetGame() {\n      this.score = 0;\n      this.snake = [{ x: 10, y: 10 }];\n      this.direction = { x: 1, y: 0 };\n      this.updateCanvas();\n    },\n    spawnFood() {\n      const foodTypes = ['üçé', 'üçå', 'üçí'];\n      const maxGridSize = (this.canvasSize / this.snakeSize) - 1;\n      this.food = {\n        x: Math.floor(Math.random() * maxGridSize),\n        y: Math.floor(Math.random() * maxGridSize),\n        type: foodTypes[Math.floor(Math.random() * foodTypes.length)],\n      };\n    },\n    gameLoop() {\n      if (this.isGamePaused) return;\n      this.updateSnake();\n      this.checkCollisions();\n      this.updateCanvas();\n    },\n    updateSnake() {\n      const newHead = {\n        x: this.snake[0].x + this.direction.x,\n        y: this.snake[0].y + this.direction.y,\n      };\n      this.snake.unshift(newHead);\n      if (newHead.x === this.food.x && newHead.y === this.food.y) {\n        this.score++;\n        if (this.soundEnabled) this.playEatSound();\n        this.spawnFood();\n      } else {\n        this.snake.pop();\n      }\n    },\n    checkCollisions() {\n      const head = this.snake[0];\n      if (\n        head.x < 0 ||\n        head.x >= this.canvasSize / this.snakeSize ||\n        head.y < 0 ||\n        head.y >= (this.canvasSize / this.snakeSize) - (this.barrierHeight / this.snakeSize) ||\n        this.snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)\n      ) {\n        this.endGame(this.score);\n      }\n    },\n    endGame(finalScore) {\n      clearInterval(this.gameInterval);\n      this.isGameStarted = false;\n      if (finalScore > this.highScore) {\n        this.highScore = finalScore;\n      }\n      const scores = JSON.parse(localStorage.getItem('snakeScores')) || [];\n      scores.push(finalScore);\n      localStorage.setItem('snakeScores', JSON.stringify(scores));\n      alert('Game Over! Votre score: ' + finalScore);\n      document.removeEventListener('keydown', this.handleKeyDown);\n      this.resetGame();\n    },\n    handleKeyDown(event) {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (this.direction.y === 0) this.direction = { x: 0, y: -1 };\n          break;\n        case 'ArrowDown':\n          if (this.direction.y === 0) this.direction = { x: 0, y: 1 };\n          break;\n        case 'ArrowLeft':\n          if (this.direction.x === 0) this.direction = { x: -1, y: 0 };\n          break;\n        case 'ArrowRight':\n          if (this.direction.x === 0) this.direction = { x: 1, y: 0 };\n          break;\n        case 'Escape':\n          this.togglePause();\n          break;\n      }\n    },\n    togglePause() {\n      this.isGamePaused = !this.isGamePaused;\n      if (this.isGamePaused) {\n        clearInterval(this.gameInterval);\n      } else {\n        this.gameInterval = setInterval(this.gameLoop, 100);\n      }\n    },\n    updateCanvas() {\n      const canvas = this.$refs.gameCanvas;\n      this.context = canvas.getContext('2d');\n      this.context.clearRect(0, 0, canvas.width, canvas.height);\n      this.context.strokeStyle = 'white';\n      this.context.lineWidth = 6;\n      this.context.strokeRect(0, 0, canvas.width, canvas.height);\n      this.snake.forEach((segment, index) => {\n        this.drawCylindricalSegment(segment.x * this.snakeSize, segment.y * this.snakeSize, index === 0);\n      });\n      this.context.fillStyle = 'red';\n      this.context.font = '30px Arial';\n      this.context.fillText(this.food.type, this.food.x * this.snakeSize, (this.food.y + 1) * this.snakeSize);\n    },\n    drawCylindricalSegment(x, y, isHead) {\n      const width = this.snakeSize * 1.5;\n      const height = this.snakeSize;\n      this.context.fillStyle = isHead ? 'darkgreen' : this.snakeColor;\n      this.context.fillRect(x, y, width, height);\n      if (isHead) {\n        this.context.fillStyle = 'white';\n        this.context.beginPath();\n        this.context.arc(x + width / 4, y + height / 4, height / 4, 0, Math.PI * 2);\n        this.context.fill();\n        this.context.fillStyle = 'black';\n        this.context.beginPath();\n        this.context.arc(x + width / 4, y + height / 4, height / 8, 0, Math.PI * 2);\n        this.context.fill();\n        this.context.fillStyle = 'red';\n        this.context.fillRect(x + width, y + height / 3, height / 2, height / 5);\n      }\n    },\n    playEatSound() {\n      const audio = new Audio(require('@/assets/eat-sound.mp3'));\n        audio.playbackRate = 2.5; // 1.5 correspond √† 50% plus rapide que la vitesse normale\n        audio.play();\n    },\n    resumeGame() {\n      this.togglePause();\n    },\n    quitGame() {\n      this.isGameStarted = false;\n      clearInterval(this.gameInterval);\n      this.$router.push({ name: 'StartSnake' });\n    },\n  },\n  mounted() {\n    this.loadSnakeColor();\n  },\n};\n</script>\n\n<style scoped>\nhtml, body {\n  margin: 0;\n  overflow: hidden;\n}\n\n#gameContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: black;\n}\n\n.title {\n  font-size: 48px;\n  font-weight: bold;\n  color: white;\n  margin-bottom: 20px;\n}\n\n.pauseMenu {\n  color: white;\n  text-align: center;\n}\n\n.gameButton {\n  background-color: red;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n  margin: 10px;\n  transition: transform 0.3s ease, background-color 0.3s ease;\n  animation: slideFromRight 0.5s ease-out; /* Animation de droite √† gauche */\n}\n\n.gameButton:hover {\n  background-color: darkred;\n  transform: scale(1.1); /* Zoom sur hover */\n}\n\n.animated:nth-child(2) {\n  animation: slideFromLeft 0.5s ease-out; /* Animation de gauche √† droite pour le 2e bouton */\n}\n\ncanvas {\n  border: 3px solid white;\n  background-color: green;\n}\n\n.score {\n  font-size: 24px;\n  color: white;\n  margin-top: 10px;\n}\n\n/* Animations des boutons */\n@keyframes slideFromRight {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideFromLeft {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n</style>\n"]}]}